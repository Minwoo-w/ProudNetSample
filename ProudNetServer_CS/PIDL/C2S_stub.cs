




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace C2S
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool JoinGameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, long timestamp);  
		public JoinGameDelegate JoinGame = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, long timestamp)
		{ 
			return false;
		};
		public delegate bool MoveToDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entityID, float px, float py, float pz);  
		public MoveToDelegate MoveTo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entityID, float px, float py, float pz)
		{ 
			return false;
		};
		public delegate bool CheckLatencyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, long currentTick);  
		public CheckLatencyDelegate CheckLatency = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, long currentTick)
		{ 
			return false;
		};
		public delegate bool GetEntityCountDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GetEntityCountDelegate GetEntityCount = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.JoinGame:
            ProcessReceivedMessage_JoinGame(__msg, pa, hostTag, remote);
            break;
        case Common.MoveTo:
            ProcessReceivedMessage_MoveTo(__msg, pa, hostTag, remote);
            break;
        case Common.CheckLatency:
            ProcessReceivedMessage_CheckLatency(__msg, pa, hostTag, remote);
            break;
        case Common.GetEntityCount:
            ProcessReceivedMessage_GetEntityCount(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_JoinGame(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        long timestamp; Nettention.Proud.Marshaler.Read(__msg,out timestamp);	
core.PostCheckReadMessage(__msg, RmiName_JoinGame);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=timestamp.ToString()+",";
        NotifyCallFromStub(Common.JoinGame, RmiName_JoinGame,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.JoinGame;
        summary.rmiName = RmiName_JoinGame;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =JoinGame (remote,ctx , timestamp );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_JoinGame);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.JoinGame;
        summary.rmiName = RmiName_JoinGame;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MoveTo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int entityID; Nettention.Proud.Marshaler.Read(__msg,out entityID);	
float px; Nettention.Proud.Marshaler.Read(__msg,out px);	
float py; Nettention.Proud.Marshaler.Read(__msg,out py);	
float pz; Nettention.Proud.Marshaler.Read(__msg,out pz);	
core.PostCheckReadMessage(__msg, RmiName_MoveTo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=entityID.ToString()+",";
parameterString+=px.ToString()+",";
parameterString+=py.ToString()+",";
parameterString+=pz.ToString()+",";
        NotifyCallFromStub(Common.MoveTo, RmiName_MoveTo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MoveTo;
        summary.rmiName = RmiName_MoveTo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MoveTo (remote,ctx , entityID, px, py, pz );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MoveTo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MoveTo;
        summary.rmiName = RmiName_MoveTo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CheckLatency(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        long currentTick; Nettention.Proud.Marshaler.Read(__msg,out currentTick);	
core.PostCheckReadMessage(__msg, RmiName_CheckLatency);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=currentTick.ToString()+",";
        NotifyCallFromStub(Common.CheckLatency, RmiName_CheckLatency,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CheckLatency;
        summary.rmiName = RmiName_CheckLatency;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CheckLatency (remote,ctx , currentTick );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CheckLatency);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CheckLatency;
        summary.rmiName = RmiName_CheckLatency;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetEntityCount(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GetEntityCount);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GetEntityCount, RmiName_GetEntityCount,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetEntityCount;
        summary.rmiName = RmiName_GetEntityCount;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetEntityCount (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetEntityCount);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetEntityCount;
        summary.rmiName = RmiName_GetEntityCount;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_JoinGame="JoinGame";
public const string RmiName_MoveTo="MoveTo";
public const string RmiName_CheckLatency="CheckLatency";
public const string RmiName_GetEntityCount="GetEntityCount";
       
public const string RmiName_First = RmiName_JoinGame;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_JoinGame="";
public const string RmiName_MoveTo="";
public const string RmiName_CheckLatency="";
public const string RmiName_GetEntityCount="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

